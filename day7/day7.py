#注释
#打印圆的周长
import math
r=10
print(2*math.pi*r)

'''
1、单行注释（行注释）
Python中使用#表示单行注释。单行注释可以作为单独的一行放在被注释代码行之上，也可以放在语句或表达式之后。

# 这是单行注释
当单行注释作为单独的一行放在被注释代码行之上时，为了保证代码的可读性，建议在#后面添加一个空格，再添加注释内容。
当单行注释放在语句或表达式之后时，同样为了保证代码的可读性，建议注释和语句（或注释和表达式）之间至少要有两个空格。
2、多行注释（块注释）
当注释内容过多，导致一行无法显示时，就可以使用多行注释。Python中使用三个单引号或三个双引号表示多行注释。

'''
'''
这是使用三个单引号的多行注释
'''
'''

"""
这是使用三个双引号的多行注释
"""
3、注意
注释不是越多越好。对于一目了然的代码，不需要添加注释。
对于复杂的操作，应该在操作开始前写上相应的注释。
对于不是一目了然的代码，应该在代码之后添加注释。
绝对不要描述代码。一般阅读代码的人都了解Python的语法，只是不知道代码要干什么。
4、关于代码规范
Python官方提供有一系列PEP文档，其中第8篇文档专门针对Python的代码格式给出了建议，也就是俗称的PEP 8。PEP 8文档地址。

注释部分内容工具书不够详细，此部分博文内容摘自简书：
作者：reldi
链接：https://www.jianshu.com/p/93fb41041e1a
'''

#字符串
print('hello，world！！！')
print("hello，world！！！")
'''
单双引号结果完全相同，既然如此，为什么要支持两种方式，因为适用以下情况
'''
str1="let's go!"
print(str1)
str2='"Hello world!" she said'
print(str2)
'''
str1，如果用同样的单引号会报错，str2同理
一定要用的话，可以用"\"转义字符来实现，如：

'''
str1='let\'s go!'
print(str1)
str2="\"Hello world!\" she said"
print(str2)

# 字符串拼接
# “+”实现
str1="let's go! "+'say '
str2='"Hello world!" she said'
print(str1+str2)

# \n代表换行符
# str函数和repr函数
strx='"Hello world!" she said'
# 当字符串中含有\n时，会自动换行，如：
str1='"Hello world!" \nshe said'
print(str1)
# 我想原样输出，使用函数repr
print('repr原样输出：'+repr(str1))
# 我想识别\n输出，使用函数str(即默认情况下)
print('str识别输出：'+str(str1))

# P.S. 在使用str函数时，如果前面定义了str变量，会报错，不可同名。。。